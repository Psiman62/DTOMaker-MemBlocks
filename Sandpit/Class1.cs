// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Models;
using DTOMaker.Runtime;
using System;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
namespace Sandpit
{
    [Entity]
    [EntityLayout(LayoutMethod.SequentialV1)]
    public interface IMyDTO
    {
        [Member(1)] bool Field1 { get; set; }
        [Member(2)] sbyte Field2 { get; set; }
        [Member(3)] byte Field3 { get; set; }
        [Member(4)] short Field4 { get; set; }
        [Member(5)] ushort Field5 { get; set; }
        [Member(6)] char Field6 { get; set; }
        [Member(8)] int Field8 { get; set; }
        [Member(9)] uint Field9 { get; set; }
        [Member(10)] float Field10 { get; set; }
        [Member(11)] long Field11 { get; set; }
        [Member(12)] ulong Field12 { get; set; }
        [Member(13)] double Field13 { get; set; }
        [Member(14)] Guid Field14 { get; set; }
        [Member(17)] Decimal Field17 { get; set; }
    }
    public partial class MyDTO : IMyDTO, IFreezable
    {
        private const int BlockLength = 128;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;
        public ReadOnlyMemory<byte> Block => _frozen ? _readonlyBlock : _writableBlock.ToArray();

        public MyDTO() => _readonlyBlock = _writableBlock = new byte[BlockLength];

        public MyDTO(ReadOnlySpan<byte> source, bool frozen)
        {
            Memory<byte> memory = new byte[BlockLength];
            source.Slice(0, BlockLength).CopyTo(memory.Span);
            _readonlyBlock = memory;
            _writableBlock = memory;
            _frozen = frozen;
        }
        public MyDTO(ReadOnlyMemory<byte> source)
        {
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Slice(0, BlockLength).Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
            _frozen = true;
        }
        // todo move to base
        private volatile bool _frozen = false;
        public bool IsFrozen() => _frozen;
        public IFreezable PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public ValueTask FreezeAsync(IBlobStore store, CancellationToken cancellation)
        {
            if (_frozen) return default;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
            return default;
        }

        public MyDTO(IMyDTO source) : this(ReadOnlySpan<byte>.Empty, false)
        {
            // todo base ctor
            // todo freezable members
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
            this.Field4 = source.Field4;
            this.Field5 = source.Field5;
            this.Field6 = source.Field6;
            this.Field8 = source.Field8;
            this.Field9 = source.Field9;
            this.Field10 = source.Field10;
            this.Field11 = source.Field11;
            this.Field12 = source.Field12;
            this.Field13 = source.Field13;
            this.Field14 = source.Field14;
            this.Field17 = source.Field17;
        }

        // <field-map>
        //  Seq.  Off.  Len.  Type        Endian  Name
        //  ----  ----  ----  --------    ------  --------
        //     1     0     1  Boolean     Little  Field1
        //     2     1     1  SByte       Little  Field2
        //     3     2     1  Byte        Little  Field3
        //     4     4     2  Int16       Little  Field4
        //     5     6     2  UInt16      Little  Field5
        //     6     8     2  Char        Little  Field6
        //     7    10     2  Half        Little  Field7
        //     8    12     4  Int32       Little  Field8
        //     9    16     4  UInt32      Little  Field9
        //    10    20     4  Single      Little  Field10
        //    11    24     8  Int64       Little  Field11
        //    12    32     8  UInt64      Little  Field12
        //    13    40     8  Double      Little  Field13
        //    14    48    16  Guid        Little  Field14
        //    15    64    16  Int128      Little  Field15
        //    16    80    16  UInt128     Little  Field16
        //    17    96    16  Decimal     Little  Field17
        // </field-map>
        public Boolean Field1
        {
            get => DTOMaker.Runtime.Codec_Boolean_LE.ReadFromSpan(_readonlyBlock.Slice(0, 1).Span);
            set => DTOMaker.Runtime.Codec_Boolean_LE.WriteToSpan(_writableBlock.Slice(0, 1).Span, IfNotFrozen(ref value));
        }

        public SByte Field2
        {
            get => DTOMaker.Runtime.Codec_SByte_LE.ReadFromSpan(_readonlyBlock.Slice(1, 1).Span);
            set => DTOMaker.Runtime.Codec_SByte_LE.WriteToSpan(_writableBlock.Slice(1, 1).Span, IfNotFrozen(ref value));
        }

        public Byte Field3
        {
            get => DTOMaker.Runtime.Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(2, 1).Span);
            set => DTOMaker.Runtime.Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(2, 1).Span, IfNotFrozen(ref value));
        }

        public Int16 Field4
        {
            get => DTOMaker.Runtime.Codec_Int16_LE.ReadFromSpan(_readonlyBlock.Slice(4, 2).Span);
            set => DTOMaker.Runtime.Codec_Int16_LE.WriteToSpan(_writableBlock.Slice(4, 2).Span, IfNotFrozen(ref value));
        }

        public UInt16 Field5
        {
            get => DTOMaker.Runtime.Codec_UInt16_LE.ReadFromSpan(_readonlyBlock.Slice(6, 2).Span);
            set => DTOMaker.Runtime.Codec_UInt16_LE.WriteToSpan(_writableBlock.Slice(6, 2).Span, IfNotFrozen(ref value));
        }

        public Char Field6
        {
            get => DTOMaker.Runtime.Codec_Char_LE.ReadFromSpan(_readonlyBlock.Slice(8, 2).Span);
            set => DTOMaker.Runtime.Codec_Char_LE.WriteToSpan(_writableBlock.Slice(8, 2).Span, IfNotFrozen(ref value));
        }

        public Int32 Field8
        {
            get => DTOMaker.Runtime.Codec_Int32_LE.ReadFromSpan(_readonlyBlock.Slice(12, 4).Span);
            set => DTOMaker.Runtime.Codec_Int32_LE.WriteToSpan(_writableBlock.Slice(12, 4).Span, IfNotFrozen(ref value));
        }

        public UInt32 Field9
        {
            get => DTOMaker.Runtime.Codec_UInt32_LE.ReadFromSpan(_readonlyBlock.Slice(16, 4).Span);
            set => DTOMaker.Runtime.Codec_UInt32_LE.WriteToSpan(_writableBlock.Slice(16, 4).Span, IfNotFrozen(ref value));
        }

        public Single Field10
        {
            get => DTOMaker.Runtime.Codec_Single_LE.ReadFromSpan(_readonlyBlock.Slice(20, 4).Span);
            set => DTOMaker.Runtime.Codec_Single_LE.WriteToSpan(_writableBlock.Slice(20, 4).Span, IfNotFrozen(ref value));
        }

        public Int64 Field11
        {
            get => DTOMaker.Runtime.Codec_Int64_LE.ReadFromSpan(_readonlyBlock.Slice(24, 8).Span);
            set => DTOMaker.Runtime.Codec_Int64_LE.WriteToSpan(_writableBlock.Slice(24, 8).Span, IfNotFrozen(ref value));
        }

        public UInt64 Field12
        {
            get => DTOMaker.Runtime.Codec_UInt64_LE.ReadFromSpan(_readonlyBlock.Slice(32, 8).Span);
            set => DTOMaker.Runtime.Codec_UInt64_LE.WriteToSpan(_writableBlock.Slice(32, 8).Span, IfNotFrozen(ref value));
        }

        public Double Field13
        {
            get => DTOMaker.Runtime.Codec_Double_LE.ReadFromSpan(_readonlyBlock.Slice(40, 8).Span);
            set => DTOMaker.Runtime.Codec_Double_LE.WriteToSpan(_writableBlock.Slice(40, 8).Span, IfNotFrozen(ref value));
        }

        public Guid Field14
        {
            get => DTOMaker.Runtime.Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(48, 16).Span);
            set => DTOMaker.Runtime.Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(48, 16).Span, IfNotFrozen(ref value));
        }

        public Decimal Field17
        {
            get => DTOMaker.Runtime.Codec_Decimal_LE.ReadFromSpan(_readonlyBlock.Slice(96, 16).Span);
            set => DTOMaker.Runtime.Codec_Decimal_LE.WriteToSpan(_writableBlock.Slice(96, 16).Span, IfNotFrozen(ref value));
        }

    }
}
