// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using System;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
namespace MyOrg.Models.MemBlocks
{
    public partial class MyOtherDTO : IMyOtherDTO, IFreezable
    {
        private const int BlockSize = 64;
        private readonly Memory<byte> _block;
        public ReadOnlyMemory<byte> Block => _block;
        public MyOtherDTO() => _block = new byte[BlockSize];
        public MyOtherDTO(ReadOnlySpan<byte> source) => _block = source.Slice(0, BlockSize).ToArray(); 
        // todo move to base
        private volatile bool _frozen;
        public bool IsFrozen() => _frozen;
        public IFreezable PartCopy() => new MyOtherDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public ValueTask FreezeAsync(IBlobStore store, CancellationToken cancellation)
        {
            if (_frozen) return default;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
            return default;
        }

        public MyOtherDTO(IMyOtherDTO source, bool frozen = false)
        {
            _block = new byte[BlockSize];
            _frozen = frozen;
            // todo base ctor
            // todo freezable members
            this.Field1 = source.Field1;
        }

        // <field-map>
        //  Seq.  Off.  Len.  Type        Endian  Name
        //  ----  ----  ----  --------    ------  --------
        //     1     0     8  Int64       Little  Field1
        // </field-map>
        public Int64 Field1
        {
            get => DTOMaker.Runtime.Codec_Int64_LE.ReadFromSpan(_block.Slice(0, 8).Span);
            set => DTOMaker.Runtime.Codec_Int64_LE.WriteToSpan(_block.Slice(0, 8).Span, IfNotFrozen(ref value));
        }

    }
}
